{
	"info": {
		"_postman_id": "c94b2e6d-20d1-43a0-9835-e6ab6077d7eb",
		"name": "Games — API Toys",
		"description": "Who knew one could play games using APIs :D\n\nA few of my favourites from [https://www.api.toys/home/index](https://www.api.toys/home/index)\n\nThis helped me understand via relatable use cases how an API works and its components like Params, Body, etc.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32231331",
		"_collection_link": "https://www.postman.com/gold-desert-869418/workspace/avi-a-designer-designing-for-devs/collection/32231331-c94b2e6d-20d1-43a0-9835-e6ab6077d7eb?action=share&source=collection_link&creator=32231331"
	},
	"item": [
		{
			"name": "rock_paper_scissors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<canvas id=\"myPieChart\" width=\"400\" height=\"400\"></canvas>",
							"",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script> ",
							"",
							"<script>",
							"    var ctx = document.getElementById(\"myPieChart\");",
							"",
							"    var myPieChart = new Chart(ctx, {",
							"        type: \"pie\",",
							"        data: {",
							"            labels: [\"CPU\", \"Player\", \"Winner\"],",
							"            datasets: [{",
							"                data: [0, 0, 0],",
							"                backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],",
							"            }]",
							"        },",
							"        options: {",
							"            title: {",
							"                display: true,",
							"                text: 'Rock Paper Scissors Result'",
							"            }",
							"        }",
							"    });",
							"",
							"    pm.getData(function (err, value) {",
							"        myPieChart.data.datasets[0].data = [value.response.cpu, value.response.player, value.response.winner];",
							"        myPieChart.update();",
							"    });",
							"",
							"</script>`;",
							"",
							"function constructVisualizerPayload() {",
							"    var res = pm.response.json();",
							"    ",
							"    var visualizerData = {",
							"        cpu: res.cpu,",
							"        player: res.player,",
							"        winner: res.winner",
							"    };",
							"",
							"    return {response: visualizerData};",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('cpu');",
							"    pm.expect(responseData).to.have.property('player');",
							"    pm.expect(responseData).to.have.property('winner');",
							"    pm.expect(responseData).to.have.property('move');",
							"});",
							"",
							"",
							"pm.test(\"Winner is either 'cpu', 'player', or 'tie'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.winner).to.be.oneOf(['cpu', 'player', 'tie']);",
							"});",
							"",
							"",
							"pm.test(\"Move is one of 'rock', 'paper', or 'scissors'\", function () {",
							"    const validMoves = [\"rock\", \"paper\", \"scissors\"];",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.move).to.be.oneOf(validMoves);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.api.toys/api/rock_paper_scissors?guess=rock",
					"protocol": "https",
					"host": [
						"www",
						"api",
						"toys"
					],
					"path": [
						"api",
						"rock_paper_scissors"
					],
					"query": [
						{
							"key": "guess",
							"value": "rock"
						}
					]
				},
				"description": "### Get Rock Paper Scissors Game Result\n\nThis endpoint allows you to play a game of rock-paper-scissors by providing your guess in the query parameter.\n\n#### Request\n\n- Method: GET\n    \n- Endpoint: `https://www.api.toys/api/rock_paper_scissors`\n    \n- Query Parameters:\n    \n    - `guess`: The move you want to play (e.g., \"rock\")\n        \n\n> Eg. if you want to play rock, **type rock in the value column in the Params tab.**  \nThen hit SEND \n  \n\n#### Example Response\n\nUpon a successful request, you will receive a JSON response with the following keys:\n\n- `cpu`: The CPU's move\n    \n- `player`: Your move\n    \n- `winner`: The winner of the game\n    \n- `move`: The move that was played\n    \n\n``` json\n{\n  \"cpu\": \"scissors\",\n  \"player\": \"rock\",\n  \"winner\": \"player\",\n  \"move\": \"rock\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "rock_paper_scissors_lizard_spock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.cpu).to.exist;",
							"    pm.expect(responseData.player).to.exist;",
							"    pm.expect(responseData.winner).to.exist;",
							"    pm.expect(responseData.move).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Cpu and player fields contain valid moves\", function () {",
							"    const validMoves = [\"rock\", \"paper\", \"scissors\", \"lizard\", \"spock\"];",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.cpu).to.be.oneOf(validMoves);",
							"    pm.expect(responseData.player).to.be.oneOf(validMoves);",
							"});",
							"",
							"",
							"pm.test(\"Winner field contains a valid value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('winner').that.is.a('string').and.satisfy(value => ['cpu', 'player', 'draw'].includes(value));",
							"});",
							"",
							"",
							"pm.test(\"Move field contains a valid move\", function () {",
							"    const validMoves = [\"rock\", \"paper\", \"scissors\", \"lizard\", \"spock\"];",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.move).to.be.oneOf(validMoves);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.api.toys/api/rock_paper_scissors_lizard_spock?guess=spock",
					"protocol": "https",
					"host": [
						"www",
						"api",
						"toys"
					],
					"path": [
						"api",
						"rock_paper_scissors_lizard_spock"
					],
					"query": [
						{
							"key": "guess",
							"value": "spock"
						}
					]
				},
				"description": "### Rock Paper Scissors Lizard Spock Game\n\nThis endpoint is used to play the Rock Paper Scissors Lizard Spock game by making a guess.\n\n#### Request\n\n- Method: GET\n    \n- URL: `https://www.api.toys/api/rock_paper_scissors_lizard_spock`\n    \n- Query Parameters:\n    \n    - `guess`: The player's guess for the game (e.g. \"spock\")\n        \n\n> Eg. if you want to play spock, **type spock in the value column in the Params tab.**  \nThen hit SEND. \n  \n\n#### Example Response\n\nUpon a successful request, the server will respond with a 200 status code and a JSON object in the response body with the following keys:\n\n- `cpu`: The CPU's move in the game\n    \n- `player`: The player's move in the game\n    \n- `winner`: The winner of the game\n    \n- `move`: The specific move that resulted in the outcome\n    \n\n``` json\n{\n    \"cpu\": \"rock\",\n    \"player\": \"spock\",\n    \"winner\": \"player\",\n    \"move\": \"spock vaporises rock\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "coin_flip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'result'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Result is either 'heads' or 'tails'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.result).to.be.oneOf(['heads', 'tails']);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.api.toys/api/coin_flip",
					"protocol": "https",
					"host": [
						"www",
						"api",
						"toys"
					],
					"path": [
						"api",
						"coin_flip"
					]
				},
				"description": "### GET /api/coin_flip\n\nThis endpoint sends a GET request to retrieve the result of a coin flip.\n\n> Hit SEND and view the response body for either heads or tails \n  \n\n#### Example\n\n``` json\n{\n    \"result\": \"tails\"\n}\n ```\n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"result\": \"string\"\n}\n\n ```\n\n- `result` (string): The result of the coin flip."
			},
			"response": []
		},
		{
			"name": "random_blog_name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<canvas id=\"myChart\" height=\"75\"></canvas>",
							"",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> ",
							"",
							"<script>",
							"    var ctx = document.getElementById(\"myChart\");",
							"",
							"    var myChart = new Chart(ctx, {",
							"        type: \"bar\",",
							"        data: {",
							"            labels: [\"long\", \"longer\", \"nsfw\", \"adult\", \"chosen\", \"more\"],",
							"            datasets: [{",
							"                data: [{{response.long}}, {{response.longer}}, {{response.nsfw}}, {{response.adult}}, 0, 0],",
							"                ",
							"                // Change these colours to customize the chart",
							"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\", \"#ff5a5f\"],",
							"            }]",
							"        },",
							"        options: {",
							"            legend: { display: false },",
							"            title: {",
							"                display: true,",
							"                text: 'Response Data'",
							"            },",
							"            scales: {",
							"                xAxes: [{",
							"                    display: true,",
							"                    scaleLabel: {",
							"                        display: true,",
							"                        labelString: 'Categories'",
							"                    }",
							"                }],",
							"                yAxes: [{",
							"                    display: true,",
							"                    scaleLabel: {",
							"                        display: true,",
							"                        labelString: 'Values'",
							"                    }",
							"                }]",
							"            }",
							"        }",
							"",
							"    });",
							"",
							"    // Access the data passed to pm.visualizer.set() from the JavaScript",
							"    // code of the Visualizer template",
							"    pm.getData(function (err, value) {",
							"        myChart.update();",
							"    });",
							"",
							"</script>`;",
							"",
							"function constructVisualizerPayload() {",
							"    var res = pm.response.json();",
							"  ",
							"    var visualizerData = {",
							"        ",
							"        // Access the properties directly from the response",
							"        long: res.long ? 1 : 0,",
							"        longer: res.longer ? 1 : 0,",
							"        nsfw: res.nsfw ? 1 : 0,",
							"        adult: res.adult ? 1 : 0,",
							"    };",
							"",
							"    return {response: visualizerData};",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.long).to.exist.and.to.be.a('boolean');",
							"    pm.expect(responseData.longer).to.exist.and.to.be.a('boolean');",
							"    pm.expect(responseData.nsfw).to.exist.and.to.be.a('boolean');",
							"    pm.expect(responseData.adult).to.exist.and.to.be.a('boolean');",
							"    pm.expect(responseData.chosen).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.more).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Chosen field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.chosen).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Chosen field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"More array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.more).to.be.an('array');",
							"    pm.expect(responseData.more).to.have.lengthOf(10);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"The 'more' array elements are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.more).to.be.an('array').that.is.not.empty;",
							"  responseData.more.forEach((element) => {",
							"    pm.expect(element).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.api.toys/api/random_blog_name?long=true&longer=true&nsfw=false&adult=true",
					"protocol": "https",
					"host": [
						"www",
						"api",
						"toys"
					],
					"path": [
						"api",
						"random_blog_name"
					],
					"query": [
						{
							"key": "long",
							"value": "true",
							"description": "Generate longer names"
						},
						{
							"key": "longer",
							"value": "true",
							"description": "Generate even longer names"
						},
						{
							"key": "nsfw",
							"value": "false",
							"description": "Enable NSFW phrases"
						},
						{
							"key": "adult",
							"value": "true",
							"description": "Enable adult nature words"
						}
					]
				},
				"description": "### Random Blog Name Generator\n\nRandomly assembles a name that could be used for blog names. The \"long\" and \"longer\" parameters make slightly longer names using one or more words. The words list is filtered to remove any words that may sound inappropriate or offensive when combined with other words. If the \"nsfw\" parameter is enabled, those excluded words are added back into the dictionary, which may result in NSFW phrases. Some words are just filth. If you want to allow words that are unquestionably adult in nature, enable the \"adult\" flag.\n\n#### Optional Parameters:\n\n- **long** (Boolean, MVC/Get/Post) - Generate longer names. Example: random_blog_name?**long=true**\n    \n- **longer** (Boolean, MVC/Get/Post) - Generate even longer names. Example: random_blog_name?long=true&**longer=true**\n    \n- **nsfw** (Boolean, MVC/Get/Post) - Enable NSFW phrases. Example: random_blog_name?long=true&longer=true&**nsfw=true**\n    \n- **adult** (Boolean, MVC/Get/Post) - Enable adult nature words. Example: random_blog_name?long=true&nsfw=true&**adult=true**\n    \n\n> Hit SEND and view Blog Name suggetions in the response body. \n  \n\n#### **Example**\n\n``` json\n{\n    \"long\": true,\n    \"longer\": true,\n    \"nsfw\": false,\n    \"adult\": true,\n    \"chosen\": \"Brainy Fancy Warrior Oxygen\",\n    \"more\": [\n        \"Sincere Yummy Girly Mice\",\n        \"Courageous Drab Carpenter Tiger\",\n        \"Difficult Puzzled Tambourine Princess\",\n        \"Fluttering Calcium Buddy Scotsman\",\n        \"Magnificent Stonemason Cloister Magic\",\n        \"Bakers Scream Tiger Wobble\",\n        \"Steady Wandering Circle Liver\",\n        \"Average Delightful Bad Boy Bazzer\",\n        \"Homely Troubled Hive-mind Sea\",\n        \"Abundant Ill Icecream Mayhem\"\n    ]\n}\n ```\n\n#### Response JSON Schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"long\": { \"type\": \"boolean\" },\n    \"longer\": { \"type\": \"boolean\" },\n    \"nsfw\": { \"type\": \"boolean\" },\n    \"adult\": { \"type\": \"boolean\" },\n    \"chosen\": { \"type\": \"string\" },\n    \"more\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" }\n    }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "plot_generator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - plot1, plot2, and plot3\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('plots');",
							"    pm.expect(responseData.plots).to.be.an('object');",
							"    pm.expect(responseData.plots).to.have.property('plot1');",
							"    pm.expect(responseData.plots).to.have.property('plot2');",
							"    pm.expect(responseData.plots).to.have.property('plot3');",
							"});",
							"",
							"",
							"pm.test(\"Plots object should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.plots).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Plots values are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.plots).to.be.an('object');",
							"  Object.values(responseData.plots).forEach(function(value) {",
							"    pm.expect(value).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://www.api.toys/api/soap_plot_generator",
					"protocol": "https",
					"host": [
						"www",
						"api",
						"toys"
					],
					"path": [
						"api",
						"soap_plot_generator"
					],
					"query": [
						{
							"key": "child_male",
							"value": "",
							"disabled": true
						},
						{
							"key": "child_female",
							"value": null,
							"disabled": true
						},
						{
							"key": "teen_male",
							"value": "",
							"disabled": true
						},
						{
							"key": "teen_female",
							"value": "",
							"disabled": true
						},
						{
							"key": "adult_male",
							"value": "",
							"disabled": true
						},
						{
							"key": "adult_female",
							"value": "",
							"disabled": true
						},
						{
							"key": "elderly_male",
							"value": "",
							"disabled": true
						},
						{
							"key": "elderly_female",
							"value": "",
							"disabled": true
						},
						{
							"key": "events",
							"value": null,
							"disabled": true
						},
						{
							"key": "circumstances",
							"value": "",
							"disabled": true
						},
						{
							"key": "objects",
							"value": null,
							"disabled": true
						}
					]
				},
				"description": "The `POST` request to `/soap_plot_generator` endpoint is used to **generate soap plots for children**, with parameters `child_female`, `events`, and `objects`.\n\n> Under the Params tab select to add elements in the response plot, then hit SEND to view plots in response body \n  \n\n### Response\n\nThe response is a JSON object with a `plots` key containing three empty plot strings: `plot1`, `plot2`, and `plot3`.\n\n#### Example\n\n``` json\n{\n    \"plots\": {\n        \"plot1\": \"Stan and Karen sleep together.\",\n        \"plot2\": \"The parents of Beth are not really her parents.\",\n        \"plot3\": \"Mark impregnates Beth.\"\n    }\n}\n\n ```\n\n#### JSON Schema\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"plots\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"plot1\": {\n                    \"type\": \"string\"\n                },\n                \"plot2\": {\n                    \"type\": \"string\"\n                },\n                \"plot3\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}\n\n ```"
			},
			"response": [
				{
					"name": "An old lover of John appears",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://www.api.toys/api/soap_plot_generator?child_female&events&objects",
							"protocol": "https",
							"host": [
								"www",
								"api",
								"toys"
							],
							"path": [
								"api",
								"soap_plot_generator"
							],
							"query": [
								{
									"key": "child_male",
									"value": null,
									"disabled": true
								},
								{
									"key": "child_female",
									"value": null
								},
								{
									"key": "teen_male",
									"value": null,
									"disabled": true
								},
								{
									"key": "teen_female",
									"value": null,
									"disabled": true
								},
								{
									"key": "adult_male",
									"value": null,
									"disabled": true
								},
								{
									"key": "adult_female",
									"value": null,
									"disabled": true
								},
								{
									"key": "elderly_male",
									"value": null,
									"disabled": true
								},
								{
									"key": "elderly_female",
									"value": null,
									"disabled": true
								},
								{
									"key": "events",
									"value": null
								},
								{
									"key": "circumstances",
									"value": null,
									"disabled": true
								},
								{
									"key": "objects",
									"value": null
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "hcdn"
						},
						{
							"key": "Date",
							"value": "Fri, 12 Jul 2024 12:56:45 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "124"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "cache-control",
							"value": "no-store, no-cache, must-revalidate, max-age=0"
						},
						{
							"key": "cache-control",
							"value": "post-check=0,pre-check=0"
						},
						{
							"key": "pragma",
							"value": "no-cache"
						},
						{
							"key": "access-control-allow-origin",
							"value": "*"
						},
						{
							"key": "content-encoding",
							"value": "br"
						},
						{
							"key": "platform",
							"value": "hostinger"
						},
						{
							"key": "content-security-policy",
							"value": "upgrade-insecure-requests"
						},
						{
							"key": "x-clacks-overhead",
							"value": "GNU Terry Pratchett"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						},
						{
							"key": "x-hcdn-request-id",
							"value": "af9536e19eff1adc3569d88f907ed3b3-mum-edge4"
						},
						{
							"key": "x-hcdn-cache-status",
							"value": "DYNAMIC"
						},
						{
							"key": "x-hcdn-upstream-rt",
							"value": "0.412"
						},
						{
							"key": "Accept-Ranges",
							"value": "bytes"
						}
					],
					"cookie": [],
					"body": "{\n    \"plots\": {\n        \"plot1\": \"Em has problems at school.\",\n        \"plot2\": \"Stan and Karen sleep together.\",\n        \"plot3\": \"An old lover of John appears.\"\n    }\n}"
				}
			]
		},
		{
			"name": "nato_phonetic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Text field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('text');",
							"});",
							"",
							"",
							"pm.test(\"Words array should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.words).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Out field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('out');",
							"});",
							"",
							"",
							"pm.test(\"Out field should have the expected data type\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.out).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.api.toys/api/nato_phonetic/palash?text=avi",
					"protocol": "https",
					"host": [
						"www",
						"api",
						"toys"
					],
					"path": [
						"api",
						"nato_phonetic",
						"palash"
					],
					"query": [
						{
							"key": "text",
							"value": "avi"
						}
					]
				},
				"description": "The `nato_phonetic` endpoint retrieves the NATO phonetic alphabet equivalent for the given text.\n\nThe NATO phonetic alphabet, more formally known as the International Radiotelephony Spelling Alphabet, is a spelling alphabet used by airline pilots, police, members of the military, and other officials when communicating over radio or telephone.\n\n> Under the Params Tab, enter the word you'd like the NATO equivalent for under Value, and hit SEND to view the response body \n  \n\n#### **NATO Example**\n\n``` json\n{\n    \"text\": \"avi\",\n    \"words\": [\n        \"Alpha\",\n        \"Victor\",\n        \"India\"\n    ],\n    \"out\": \"Alpha Victor India\"\n}\n\n ```\n\n#### **Response Schema**\n\nThe response for this request can be documented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"text\": {\n      \"type\": \"string\"\n    },\n    \"words\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"out\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
			},
			"response": [
				{
					"name": "avi",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.api.toys/api/nato_phonetic/palash?text=avi",
							"protocol": "https",
							"host": [
								"www",
								"api",
								"toys"
							],
							"path": [
								"api",
								"nato_phonetic",
								"palash"
							],
							"query": [
								{
									"key": "text",
									"value": "avi"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "hcdn"
						},
						{
							"key": "Date",
							"value": "Fri, 12 Jul 2024 12:57:34 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "80"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "cache-control",
							"value": "no-store, no-cache, must-revalidate, max-age=0"
						},
						{
							"key": "cache-control",
							"value": "post-check=0,pre-check=0"
						},
						{
							"key": "pragma",
							"value": "no-cache"
						},
						{
							"key": "access-control-allow-origin",
							"value": "*"
						},
						{
							"key": "content-encoding",
							"value": "br"
						},
						{
							"key": "platform",
							"value": "hostinger"
						},
						{
							"key": "content-security-policy",
							"value": "upgrade-insecure-requests"
						},
						{
							"key": "x-clacks-overhead",
							"value": "GNU Terry Pratchett"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						},
						{
							"key": "x-hcdn-request-id",
							"value": "2c57605fceeb6f26ddeeff14fa36e0fd-mum-edge4"
						},
						{
							"key": "x-hcdn-cache-status",
							"value": "DYNAMIC"
						},
						{
							"key": "x-hcdn-upstream-rt",
							"value": "0.442"
						},
						{
							"key": "Accept-Ranges",
							"value": "bytes"
						}
					],
					"cookie": [],
					"body": "{\n    \"text\": \"avi\",\n    \"words\": [\n        \"Alpha\",\n        \"Victor\",\n        \"India\"\n    ],\n    \"out\": \"Alpha Victor India\"\n}"
				}
			]
		},
		{
			"name": "anagram",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Anagram is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.anagram).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Anagram should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Answers array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.answers).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each element in the 'answers' array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.answers).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.answers.forEach(function(answer) {",
							"        pm.expect(answer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.api.toys/api/countdown_anagram?size=8",
					"protocol": "https",
					"host": [
						"www",
						"api",
						"toys"
					],
					"path": [
						"api",
						"countdown_anagram"
					],
					"query": [
						{
							"key": "size",
							"value": "8",
							"description": "8 or 9"
						}
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve a countdown anagram with a specified size. The request should include a query parameter \"size\" with the desired size of the anagram.\n\nAn anagram is _a word or phrase that's formed by rearranging the letters of another word or phrase_.\n\n> Under the Params Tab, enter the character length of word you want to generate the anagram for. Then hit SEND to view response body. \n  \n\n### Response Body\n\nThe response will be in JSON format and will include the following fields:\n\n- \"anagram\": A string representing the countdown anagram.\n    \n- \"answers\": An array of strings containing possible answers for the anagram.\n    \n- \"clue\": A string providing a clue related to the anagram.\n    \n\n#### Example Response\n\n``` json\n{\n    \"anagram\": \"HAMUDDER\",\n    \"answers\": [\n        \"DRUMHEAD\"\n    ],\n    \"clue\": \"It'll take the mother of all beatings, but it won't bruise.\"\n}\n\n ```"
			},
			"response": [
				{
					"name": "OINTMENT",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.api.toys/api/countdown_anagram?size=8",
							"protocol": "https",
							"host": [
								"www",
								"api",
								"toys"
							],
							"path": [
								"api",
								"countdown_anagram"
							],
							"query": [
								{
									"key": "size",
									"value": "8",
									"description": "8 or 9"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "hcdn"
						},
						{
							"key": "Date",
							"value": "Fri, 12 Jul 2024 12:57:52 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "49"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "cache-control",
							"value": "no-store, no-cache, must-revalidate, max-age=0"
						},
						{
							"key": "cache-control",
							"value": "post-check=0,pre-check=0"
						},
						{
							"key": "pragma",
							"value": "no-cache"
						},
						{
							"key": "access-control-allow-origin",
							"value": "*"
						},
						{
							"key": "content-encoding",
							"value": "br"
						},
						{
							"key": "platform",
							"value": "hostinger"
						},
						{
							"key": "content-security-policy",
							"value": "upgrade-insecure-requests"
						},
						{
							"key": "x-clacks-overhead",
							"value": "GNU Terry Pratchett"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						},
						{
							"key": "x-hcdn-request-id",
							"value": "1cbc2625fff1a1b83b1059cf36e32085-mum-edge4"
						},
						{
							"key": "x-hcdn-cache-status",
							"value": "DYNAMIC"
						},
						{
							"key": "x-hcdn-upstream-rt",
							"value": "0.451"
						},
						{
							"key": "Accept-Ranges",
							"value": "bytes"
						}
					],
					"cookie": [],
					"body": "{\n    \"anagram\": \"MINTNOTE\",\n    \"answers\": [\n        \"OINTMENT\"\n    ]\n}"
				}
			]
		}
	]
}
